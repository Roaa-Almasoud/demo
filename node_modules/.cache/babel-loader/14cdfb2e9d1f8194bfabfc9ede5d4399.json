{"ast":null,"code":"let alreadyTested = false;\nlet passiveSupported = false;\n\nconst isSupported = () => {\n  if (alreadyTested) return passiveSupported;\n  alreadyTested = true; // Test via a getter in the options object to see if the passive property is accessed\n\n  let opts;\n\n  try {\n    opts = Object.defineProperty({}, 'passive', {\n      get: () => {\n        passiveSupported = true;\n      }\n    });\n    window.addEventListener('test', null, opts);\n  } catch (e) {\n    return passiveSupported;\n  }\n\n  window.removeEventListener('test', null, opts);\n  return passiveSupported;\n};\n\nconst passiveEvent = () => {\n  return isSupported() ? {\n    passive: true\n  } : false;\n};\n\nexport { passiveEvent };","map":{"version":3,"sources":["/Users/roaa/Desktop/demo/src/scripts/utils/event.utils.js"],"names":["alreadyTested","passiveSupported","isSupported","opts","Object","defineProperty","get","window","addEventListener","e","removeEventListener","passiveEvent","passive"],"mappings":"AAAA,IAAIA,aAAa,GAAG,KAApB;AACA,IAAIC,gBAAgB,GAAG,KAAvB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACzB,MAAIF,aAAJ,EAAmB,OAAOC,gBAAP;AACnBD,EAAAA,aAAa,GAAG,IAAhB,CAFyB,CAIzB;;AACA,MAAIG,IAAJ;;AACA,MAAI;AACHA,IAAAA,IAAI,GAAGC,MAAM,CAACC,cAAP,CAAsB,EAAtB,EAA0B,SAA1B,EAAqC;AAC3CC,MAAAA,GAAG,EAAE,MAAM;AACVL,QAAAA,gBAAgB,GAAG,IAAnB;AACA;AAH0C,KAArC,CAAP;AAKAM,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,IAAhC,EAAsCL,IAAtC;AACA,GAPD,CAOE,OAAOM,CAAP,EAAU;AACX,WAAOR,gBAAP;AACA;;AACDM,EAAAA,MAAM,CAACG,mBAAP,CAA2B,MAA3B,EAAmC,IAAnC,EAAyCP,IAAzC;AACA,SAAOF,gBAAP;AACA,CAlBD;;AAoBA,MAAMU,YAAY,GAAG,MAAM;AAC1B,SAAOT,WAAW,KAAK;AAAEU,IAAAA,OAAO,EAAE;AAAX,GAAL,GAAyB,KAA3C;AACA,CAFD;;AAIA,SAASD,YAAT","sourcesContent":["let alreadyTested = false;\nlet passiveSupported = false;\n\nconst isSupported = () => {\n\tif (alreadyTested) return passiveSupported;\n\talreadyTested = true;\n\n\t// Test via a getter in the options object to see if the passive property is accessed\n\tlet opts;\n\ttry {\n\t\topts = Object.defineProperty({}, 'passive', {\n\t\t\tget: () => {\n\t\t\t\tpassiveSupported = true;\n\t\t\t}\n\t\t});\n\t\twindow.addEventListener('test', null, opts);\n\t} catch (e) {\n\t\treturn passiveSupported;\n\t}\n\twindow.removeEventListener('test', null, opts);\n\treturn passiveSupported;\n};\n\nconst passiveEvent = () => {\n\treturn isSupported() ? { passive: true } : false;\n};\n\nexport { passiveEvent };"]},"metadata":{},"sourceType":"module"}