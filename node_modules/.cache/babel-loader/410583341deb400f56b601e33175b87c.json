{"ast":null,"code":"import * as THREE from 'three';\nimport { TweenLite } from 'gsap/TweenMax';\nimport InteractiveControls from './controls/InteractiveControls';\nimport Particles from './particles/Particles'; //const glslify = require('glslify');\n\nexport default class WebGLView {\n  constructor(app) {\n    this.app = app;\n    this.samples = ['images/sample-01.png', 'images/sample-02.png', 'images/sample-03.png', 'images/sample-04.png', 'images/sample-05.png'];\n    this.initThree();\n    this.initParticles();\n    this.initControls();\n    const rnd = ~~(Math.random() * this.samples.length);\n    this.goto(rnd);\n  }\n\n  initThree() {\n    // scene\n    this.scene = new THREE.Scene(); // camera\n\n    this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);\n    this.camera.position.z = 300; // renderer\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    }); // clock\n\n    this.clock = new THREE.Clock(true);\n  }\n\n  initControls() {\n    this.interactive = new InteractiveControls(this.camera, this.renderer.domElement);\n  }\n\n  initParticles() {\n    this.particles = new Particles(this);\n    this.scene.add(this.particles.container);\n  } // ---------------------------------------------------------------------------------------------\n  // PUBLIC\n  // ---------------------------------------------------------------------------------------------\n\n\n  update() {\n    const delta = this.clock.getDelta();\n    if (this.particles) this.particles.update(delta);\n  }\n\n  draw() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  goto(index) {\n    // init next\n    if (this.currSample == null) this.particles.init(this.samples[index]); // hide curr then init next\n    else {\n      this.particles.hide(true).then(() => {\n        this.particles.init(this.samples[index]);\n      });\n    }\n    this.currSample = index;\n  }\n\n  next() {\n    if (this.currSample < this.samples.length - 1) this.goto(this.currSample + 1);else this.goto(0);\n  } // ---------------------------------------------------------------------------------------------\n  // EVENT HANDLERS\n  // ---------------------------------------------------------------------------------------------\n\n\n  resize() {\n    if (!this.renderer) return;\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.fovHeight = 2 * Math.tan(this.camera.fov * Math.PI / 180 / 2) * this.camera.position.z;\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    if (this.interactive) this.interactive.resize();\n    if (this.particles) this.particles.resize();\n  }\n\n}","map":{"version":3,"sources":["/Users/roaa/Desktop/demo/src/scripts/webgl/WebGLView.js"],"names":["THREE","TweenLite","InteractiveControls","Particles","WebGLView","constructor","app","samples","initThree","initParticles","initControls","rnd","Math","random","length","goto","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","alpha","clock","Clock","interactive","domElement","particles","add","container","update","delta","getDelta","draw","render","index","currSample","init","hide","then","next","resize","aspect","updateProjectionMatrix","fovHeight","tan","fov","PI","setSize"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport { TweenLite } from 'gsap/TweenMax';\n\nimport InteractiveControls from './controls/InteractiveControls';\nimport Particles from './particles/Particles';\n\n//const glslify = require('glslify');\n\nexport default class WebGLView {\n\n\tconstructor(app) {\n\t\tthis.app = app;\n\n\t\tthis.samples = [\n\t\t\t'images/sample-01.png',\n\t\t\t'images/sample-02.png',\n\t\t\t'images/sample-03.png',\n\t\t\t'images/sample-04.png',\n\t\t\t'images/sample-05.png',\n\t\t];\n\n\t\tthis.initThree();\n\t\tthis.initParticles();\n\t\tthis.initControls();\n\n\t\tconst rnd = ~~(Math.random() * this.samples.length);\n\t\tthis.goto(rnd);\n\t}\n\n\tinitThree() {\n\t\t// scene\n\t\tthis.scene = new THREE.Scene();\n\n\t\t// camera\n\t\tthis.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);\n\t\tthis.camera.position.z = 300;\n\n\t\t// renderer\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n\n        // clock\n\t\tthis.clock = new THREE.Clock(true);\n\t}\n\n\tinitControls() {\n\t\tthis.interactive = new InteractiveControls(this.camera, this.renderer.domElement);\n\t}\n\n\tinitParticles() {\n\t\tthis.particles = new Particles(this);\n\t\tthis.scene.add(this.particles.container);\n\t}\n\n\t// ---------------------------------------------------------------------------------------------\n\t// PUBLIC\n\t// ---------------------------------------------------------------------------------------------\n\n\tupdate() {\n\t\tconst delta = this.clock.getDelta();\n\n\t\tif (this.particles) this.particles.update(delta);\n\t}\n\n\tdraw() {\n\t\tthis.renderer.render(this.scene, this.camera);\n\t}\n\n\n\tgoto(index) {\n\t\t// init next\n\t\tif (this.currSample == null) this.particles.init(this.samples[index]);\n\t\t// hide curr then init next\n\t\telse {\n\t\t\tthis.particles.hide(true).then(() => {\n\t\t\t\tthis.particles.init(this.samples[index]);\n\t\t\t});\n\t\t}\n\n\t\tthis.currSample = index;\n\t}\n\n\tnext() {\n\t\tif (this.currSample < this.samples.length - 1) this.goto(this.currSample + 1);\n\t\telse this.goto(0);\n\t}\n\n\t// ---------------------------------------------------------------------------------------------\n\t// EVENT HANDLERS\n\t// ---------------------------------------------------------------------------------------------\n\n\tresize() {\n\t\tif (!this.renderer) return;\n\t\tthis.camera.aspect = window.innerWidth / window.innerHeight;\n\t\tthis.camera.updateProjectionMatrix();\n\n\t\tthis.fovHeight = 2 * Math.tan((this.camera.fov * Math.PI) / 180 / 2) * this.camera.position.z;\n\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\n\t\tif (this.interactive) this.interactive.resize();\n\t\tif (this.particles) this.particles.resize();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}