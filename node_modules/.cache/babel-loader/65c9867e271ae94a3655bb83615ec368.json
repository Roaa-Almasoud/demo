{"ast":null,"code":"var alreadyTested=false;var passiveSupported=false;var isSupported=function isSupported(){if(alreadyTested)return passiveSupported;alreadyTested=true;// Test via a getter in the options object to see if the passive property is accessed\ntry{var _opts=Object.defineProperty({},'passive',{get:function get(){passiveSupported=true;}});window.addEventListener('test',null,_opts);}catch(e){return passiveSupported;}window.removeEventListener('test',null,opts);return passiveSupported;};var passiveEvent=function passiveEvent(){return isSupported()?{passive:true}:false;};export{passiveEvent};","map":{"version":3,"sources":["/Users/roaa/Desktop/demo/src/scripts/utils/event.utils.js"],"names":["alreadyTested","passiveSupported","isSupported","opts","Object","defineProperty","get","window","addEventListener","e","removeEventListener","passiveEvent","passive"],"mappings":"AAAA,GAAIA,CAAAA,aAAa,CAAG,KAApB,CACA,GAAIC,CAAAA,gBAAgB,CAAG,KAAvB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACzB,GAAIF,aAAJ,CAAmB,MAAOC,CAAAA,gBAAP,CACnBD,aAAa,CAAG,IAAhB,CAEA;AACA,GAAI,CACH,GAAIG,CAAAA,KAAI,CAAGC,MAAM,CAACC,cAAP,CAAsB,EAAtB,CAA0B,SAA1B,CAAqC,CAC/CC,GAAG,CAAE,cAAM,CACVL,gBAAgB,CAAG,IAAnB,CACA,CAH8C,CAArC,CAAX,CAKAM,MAAM,CAACC,gBAAP,CAAwB,MAAxB,CAAgC,IAAhC,CAAsCL,KAAtC,EACA,CAAC,MAAOM,CAAP,CAAU,CACX,MAAOR,CAAAA,gBAAP,CACA,CACDM,MAAM,CAACG,mBAAP,CAA2B,MAA3B,CAAmC,IAAnC,CAAyCP,IAAzC,EACA,MAAOF,CAAAA,gBAAP,CACA,CAjBD,CAmBA,GAAMU,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAC1B,MAAOT,CAAAA,WAAW,GAAK,CAAEU,OAAO,CAAE,IAAX,CAAL,CAAyB,KAA3C,CACA,CAFD,CAIA,OAASD,YAAT","sourcesContent":["let alreadyTested = false;\nlet passiveSupported = false;\n\nconst isSupported = () => {\n\tif (alreadyTested) return passiveSupported;\n\talreadyTested = true;\n\n\t// Test via a getter in the options object to see if the passive property is accessed\n\ttry {\n\t\tlet opts = Object.defineProperty({}, 'passive', {\n\t\t\tget: () => {\n\t\t\t\tpassiveSupported = true;\n\t\t\t}\n\t\t});\n\t\twindow.addEventListener('test', null, opts);\n\t} catch (e) {\n\t\treturn passiveSupported;\n\t}\n\twindow.removeEventListener('test', null, opts);\n\treturn passiveSupported;\n};\n\nconst passiveEvent = () => {\n\treturn isSupported() ? { passive: true } : false;\n};\n\nexport { passiveEvent };"]},"metadata":{},"sourceType":"module"}