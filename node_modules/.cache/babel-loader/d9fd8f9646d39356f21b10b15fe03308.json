{"ast":null,"code":"var Plotter = require('./Plotter');\n\nvar Metric = require('./Metric');\n\nvar DEFAULT_RESOLUTION = 1;\n\nfunction ValuePlotter(parent, object, value, params) {\n  Plotter.apply(this, arguments);\n  var svg = this._svg,\n      svgWidth = Number(svg.getAttribute('width')),\n      svgHeight = Number(svg.getAttribute('height'));\n  params = params || {};\n  params.height = params.height || svgHeight;\n  params.resolution = params.resolution || DEFAULT_RESOLUTION;\n  var resolution = params.resolution,\n      length = Math.floor(svgWidth / resolution);\n  var points = this._points = new Array(length * 2),\n      buffer0 = this._buffer0 = new Array(length),\n      buffer1 = this._buffer1 = new Array(length);\n  var min = this._lineWidth * 0.5;\n  var i = -1;\n\n  while (++i < length) {\n    buffer0[i] = buffer1[i] = points[i * 2] = points[i * 2 + 1] = min;\n  }\n\n  this._height = params.height = params.height < Metric.COMPONENT_MIN_HEIGHT ? Metric.COMPONENT_MIN_HEIGHT : params.height;\n\n  this._svgSetSize(svgHeight, Math.floor(params.height));\n\n  this._grid.style.stroke = 'rgb(39,44,46)';\n\n  this._updateHeight();\n\n  this._drawValue();\n}\n\nValuePlotter.prototype = Object.create(Plotter.prototype);\nValuePlotter.prototype.constructor = ValuePlotter;\n\nValuePlotter.prototype._redraw = function () {\n  var points = this._points,\n      bufferLen = this._buffer0.length;\n  var width = Number(this._svg.getAttribute('width')),\n      ratio = width / (bufferLen - 1);\n  var i = -1;\n\n  while (++i < bufferLen) {\n    points[i * 2] = width - i * ratio;\n  }\n\n  this._drawValue();\n};\n\nValuePlotter.prototype.onGroupSizeChange = function () {\n  var width = this._wrapNode.getWidth(),\n      height = this._height;\n\n  this._svgSetSize(width, height);\n\n  this._updateHeight();\n\n  this._drawGrid();\n\n  this._redraw();\n};\n\nValuePlotter.prototype._drawValue = function () {\n  this._drawCurve();\n};\n\nValuePlotter.prototype._drawGrid = function () {\n  var svg = this._svg;\n  var svgWidth = Number(svg.getAttribute('width')),\n      svgHeightHalf = Math.floor(Number(svg.getAttribute('height')) * 0.5);\n  var pathCmd = '';\n  pathCmd += this._pathCmdMoveTo(0, svgHeightHalf);\n  pathCmd += this._pathCmdLineTo(svgWidth, svgHeightHalf);\n\n  this._grid.setAttribute('d', pathCmd);\n}; //TODO: merge update + pathcmd\n\n\nValuePlotter.prototype._drawCurve = function () {\n  var svg = this._svg;\n  var value = this._obj[this._key];\n  var buffer0 = this._buffer0,\n      buffer1 = this._buffer1,\n      points = this._points;\n  var bufferLength = buffer0.length;\n  var pathCmd = '';\n  var heightHalf = Number(svg.getAttribute('height')) * 0.5,\n      unit = heightHalf - this._lineWidth * 0.5;\n  points[1] = buffer0[0];\n  buffer0[bufferLength - 1] = value * unit * -1 + Math.floor(heightHalf);\n  pathCmd += this._pathCmdMoveTo(points[0], points[1]);\n  var i = 0,\n      index;\n\n  while (++i < bufferLength) {\n    index = i * 2;\n    buffer1[i - 1] = buffer0[i];\n    points[index + 1] = buffer0[i - 1] = buffer1[i - 1];\n    pathCmd += this._pathCmdLineTo(points[index], points[index + 1]);\n  }\n\n  this._path.setAttribute('d', pathCmd);\n};\n\nValuePlotter.prototype.update = function () {\n  if (this._parent.isDisabled()) return;\n\n  this._drawValue();\n};\n\nmodule.exports = ValuePlotter;","map":{"version":3,"sources":["/Users/roaa/Desktop/demo/node_modules/@brunoimbrizi/controlkit/lib/component/ValuePlotter.js"],"names":["Plotter","require","Metric","DEFAULT_RESOLUTION","ValuePlotter","parent","object","value","params","apply","arguments","svg","_svg","svgWidth","Number","getAttribute","svgHeight","height","resolution","length","Math","floor","points","_points","Array","buffer0","_buffer0","buffer1","_buffer1","min","_lineWidth","i","_height","COMPONENT_MIN_HEIGHT","_svgSetSize","_grid","style","stroke","_updateHeight","_drawValue","prototype","Object","create","constructor","_redraw","bufferLen","width","ratio","onGroupSizeChange","_wrapNode","getWidth","_drawGrid","_drawCurve","svgHeightHalf","pathCmd","_pathCmdMoveTo","_pathCmdLineTo","setAttribute","_obj","_key","bufferLength","heightHalf","unit","index","_path","update","_parent","isDisabled","module","exports"],"mappings":"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","sourcesContent":["var Plotter = require('./Plotter');\r\nvar Metric  = require('./Metric');\r\n\r\nvar DEFAULT_RESOLUTION = 1;\r\n\r\nfunction ValuePlotter(parent,object,value,params) {\r\n    Plotter.apply(this,arguments);\r\n\r\n    var svg       = this._svg,\r\n        svgWidth  = Number(svg.getAttribute('width')),\r\n        svgHeight = Number(svg.getAttribute('height'));\r\n\r\n    params            = params            || {};\r\n    params.height     = params.height     || svgHeight;\r\n    params.resolution = params.resolution || DEFAULT_RESOLUTION;\r\n\r\n    var resolution = params.resolution,\r\n        length     = Math.floor(svgWidth / resolution);\r\n\r\n    var points     = this._points  = new Array(length * 2),\r\n        buffer0    = this._buffer0 = new Array(length),\r\n        buffer1    = this._buffer1 = new Array(length);\r\n\r\n    var min = this._lineWidth * 0.5;\r\n\r\n    var i = -1;\r\n    while (++i < length) {\r\n        buffer0[i] = buffer1[i] = points[i * 2] = points[i * 2 + 1] = min;\r\n    }\r\n\r\n    this._height = params.height = params.height  < Metric.COMPONENT_MIN_HEIGHT ?\r\n                   Metric.COMPONENT_MIN_HEIGHT : params.height;\r\n\r\n    this._svgSetSize(svgHeight,Math.floor(params.height));\r\n    this._grid.style.stroke = 'rgb(39,44,46)';\r\n\r\n    this._updateHeight();\r\n    this._drawValue();\r\n}\r\nValuePlotter.prototype = Object.create(Plotter.prototype);\r\nValuePlotter.prototype.constructor = ValuePlotter;\r\n\r\nValuePlotter.prototype._redraw = function () {\r\n    var points = this._points,\r\n        bufferLen = this._buffer0.length;\r\n\r\n    var width = Number(this._svg.getAttribute('width')),\r\n        ratio = width / (bufferLen - 1);\r\n\r\n    var i = -1;\r\n    while (++i < bufferLen) {\r\n        points[i * 2] = width - i * ratio;\r\n    }\r\n\r\n    this._drawValue();\r\n};\r\n\r\nValuePlotter.prototype.onGroupSizeChange = function () {\r\n    var width = this._wrapNode.getWidth(),\r\n        height = this._height;\r\n\r\n    this._svgSetSize(width, height);\r\n    this._updateHeight();\r\n    this._drawGrid();\r\n    this._redraw();\r\n};\r\n\r\nValuePlotter.prototype._drawValue = function () {\r\n    this._drawCurve();\r\n};\r\n\r\nValuePlotter.prototype._drawGrid = function () {\r\n    var svg = this._svg;\r\n\r\n    var svgWidth = Number(svg.getAttribute('width')),\r\n        svgHeightHalf = Math.floor(Number(svg.getAttribute('height')) * 0.5);\r\n\r\n    var pathCmd = '';\r\n        pathCmd += this._pathCmdMoveTo(0, svgHeightHalf);\r\n        pathCmd += this._pathCmdLineTo(svgWidth, svgHeightHalf);\r\n\r\n    this._grid.setAttribute('d', pathCmd);\r\n};\r\n\r\n//TODO: merge update + pathcmd\r\nValuePlotter.prototype._drawCurve = function () {\r\n    var svg = this._svg;\r\n\r\n    var value = this._obj[this._key];\r\n\r\n    var buffer0 = this._buffer0,\r\n        buffer1 = this._buffer1,\r\n        points = this._points;\r\n\r\n    var bufferLength = buffer0.length;\r\n\r\n    var pathCmd = '';\r\n\r\n    var heightHalf = Number(svg.getAttribute('height')) * 0.5,\r\n        unit = heightHalf - this._lineWidth * 0.5;\r\n\r\n    points[1] = buffer0[0];\r\n    buffer0[bufferLength - 1] = (value * unit) * -1 + Math.floor(heightHalf);\r\n\r\n    pathCmd += this._pathCmdMoveTo(points[0], points[1]);\r\n\r\n    var i = 0, index;\r\n\r\n    while (++i < bufferLength) {\r\n        index = i * 2;\r\n\r\n        buffer1[i - 1] = buffer0[i];\r\n        points[index + 1] = buffer0[i - 1] = buffer1[i - 1];\r\n\r\n        pathCmd += this._pathCmdLineTo(points[index], points[index + 1]);\r\n    }\r\n\r\n    this._path.setAttribute('d', pathCmd);\r\n};\r\n\r\nValuePlotter.prototype.update = function () {\r\n    if (this._parent.isDisabled())return;\r\n    this._drawValue();\r\n}\r\n\r\n\r\nmodule.exports = ValuePlotter;\r\n\r\n"]},"metadata":{},"sourceType":"script"}