{"ast":null,"code":"var ObjectComponent = require('./../core/ObjectComponent');\n\nvar Node = require('../core/document/Node');\n\nvar ColorMode = require('../core/color/ColorMode');\n\nvar Picker = require('./Picker');\n\nvar ColorUtil = require('../core/color/ColorUtil');\n\nvar Options = require('./Options');\n\nvar ButtonPreset = require('./ButtonPreset');\n\nvar Metric = require('./Metric'),\n    CSS = require('../core/document/CSS');\n\nvar Event_ = require('../core/event/Event'),\n    NodeEvent = require('../core/document/NodeEvent'),\n    ComponentEvent = require('../core/ComponentEvent');\n\nvar ColorFormatError = require('../core/color/ColorFormatError');\n\nvar DEFAULT_COLOR_MODE = ColorMode.HEX,\n    DEFAULT_PRESETS = null;\nvar MSG_COLOR_FORMAT_HEX = 'Color format should be hex. Set colorMode to rgb, rgbfv or hsv.',\n    MSG_COLOR_FORMAT_RGB_RGBFV_HSV = 'Color format should be rgb, rgbfv or hsv. Set colorMode to hex.',\n    MSG_COLOR_PRESET_FORMAT_HEX = 'Preset color format should be hex.',\n    MSG_COLOR_PRESET_FORMAT_RGB_RGBFV_HSV = 'Preset color format should be rgb, rgbfv or hsv.';\n\nfunction Color(parent, object, value, params) {\n  ObjectComponent.apply(this, arguments);\n  params = params || {};\n  params.presets = params.presets || DEFAULT_PRESETS;\n  params.colorMode = params.colorMode || DEFAULT_COLOR_MODE;\n  params.onChange = params.onChange || this._onChange;\n  this._presetsKey = params.presets;\n  this._onChange = params.onChange;\n  var color = this._color = new Node();\n  value = this._value = this._obj[this._key];\n  var colorMode = this._colorMode = params.colorMode;\n\n  this._validateColorFormat(value, MSG_COLOR_FORMAT_HEX, MSG_COLOR_FORMAT_RGB_RGBFV_HSV);\n\n  var wrap = this._wrapNode;\n\n  if (!this._presetsKey) {\n    color.setStyleClass(CSS.Color);\n    wrap.addChild(color);\n  } else {\n    color.setStyleClass(CSS.Color);\n    var wrap_ = new Node();\n    wrap_.setStyleClass(CSS.WrapColorWPreset);\n    wrap.addChild(wrap_);\n    wrap_.addChild(color);\n    var presets = this._obj[this._presetsKey];\n    var i = -1;\n\n    while (++i < presets.length) {\n      this._validateColorFormat(presets[i], MSG_COLOR_PRESET_FORMAT_HEX, MSG_COLOR_PRESET_FORMAT_RGB_RGBFV_HSV);\n    }\n\n    var options = Options.get(),\n        presetBtn = new ButtonPreset(wrap);\n\n    var onPresetDeactivate = function onPresetDeactivate() {\n      options.clear();\n      presetBtn.deactivate();\n    };\n\n    var self = this;\n\n    var onPresetActivate = function onPresetActivate() {\n      options.build(presets, self._value, color, function () {\n        self.pushHistoryState();\n        self._value = presets[options.getSelectedIndex()];\n        self.applyValue();\n\n        self._onChange(self._obj[self._key]);\n      }, onPresetDeactivate, Metric.PADDING_PRESET, true, colorMode);\n    };\n\n    presetBtn.setOnActive(onPresetActivate);\n    presetBtn.setOnDeactive(onPresetDeactivate);\n  }\n\n  color.addEventListener(NodeEvent.MOUSE_DOWN, this._onColorTrigger.bind(this));\n\n  this._updateColor();\n}\n\nColor.prototype = Object.create(ObjectComponent.prototype);\nColor.prototype.constructor = Color;\n\nColor.prototype._onColorTrigger = function () {\n  var colorMode = this._colorMode,\n      colorModeHEX = ColorMode.HEX,\n      colorModeRGB = ColorMode.RGB,\n      colorModeRGBfv = ColorMode.RGBfv,\n      colorModeHSV = ColorMode.HSV;\n  var value = this._value,\n      temp;\n\n  var onPickerPick = function () {\n    this.pushHistoryState();\n\n    switch (colorMode) {\n      case colorModeHEX:\n        this._value = Picker.get().getHEX();\n        break;\n\n      case colorModeRGB:\n        //if val = Float32array or so\n        temp = Picker.get().getRGB();\n        value[0] = temp[0];\n        value[1] = temp[1];\n        value[2] = temp[2];\n        break;\n\n      case colorModeRGBfv:\n        temp = Picker.get().getRGBfv();\n        value[0] = temp[0];\n        value[1] = temp[1];\n        value[2] = temp[2];\n        break;\n\n      case colorModeHSV:\n        this._value = Picker.get().getHSV();\n        break;\n    }\n\n    this.applyValue();\n  }.bind(this);\n\n  var picker = Picker.get();\n\n  switch (colorMode) {\n    case colorModeHEX:\n      picker.setColorHEX(value);\n      break;\n\n    case colorModeRGB:\n      picker.setColorRGB(value[0], value[1], value[2]);\n      break;\n\n    case colorModeRGBfv:\n      picker.setColorRGBfv(value[0], value[1], value[2]);\n      break;\n\n    case colorModeHSV:\n      picker.setColorHSV(value[0], value[1], value[2]);\n      break;\n  }\n\n  picker.setCallbackPick(onPickerPick);\n  picker.open();\n};\n\nColor.prototype.applyValue = function () {\n  this._obj[this._key] = this._value;\n\n  this._updateColor();\n\n  this.dispatchEvent(new Event_(this, ComponentEvent.VALUE_UPDATED, null));\n\n  this._onChange(this._obj[this._key]);\n};\n\nColor.prototype.onValueUpdate = function (e) {\n  if (e.data.origin == this) return;\n  this._value = this._obj[this._key];\n\n  this._updateColor();\n};\n\nColor.prototype._updateColor = function () {\n  var color = this._value,\n      colorNode = this._color,\n      nodeColor;\n  colorNode.setProperty('innerHTML', color);\n\n  switch (this._colorMode) {\n    case ColorMode.HEX:\n      nodeColor = color;\n      break;\n\n    case ColorMode.RGB:\n      nodeColor = ColorUtil.RGB2HEX(color[0], color[1], color[2]);\n      break;\n\n    case ColorMode.RGBfv:\n      nodeColor = ColorUtil.RGBfv2HEX(color[0], color[1], color[2]);\n      break;\n\n    case ColorMode.HSV:\n      nodeColor = ColorUtil.HSV2RGB(color[0], color[1], color[2]);\n      break;\n  }\n\n  colorNode.getStyle().backgroundColor = nodeColor;\n};\n\nColor.prototype._validateColorFormat = function (value, msgHex, msgArr) {\n  var colorMode = this._colorMode;\n\n  if (colorMode == ColorMode.HEX && Object.prototype.toString.call(value) === '[object Array]' || colorMode == ColorMode.HEX && Object.prototype.toString.call(value) === '[object Float32Array]') {\n    throw new ColorFormatError(msgHex);\n  }\n\n  if ((colorMode == ColorMode.RGB || colorMode == ColorMode.RGBfv || colorMode == ColorMode.HSV) && Object.prototype.toString.call(value) !== '[object Array]' || colorMode == ColorMode.HSV && Object.prototype.toString.call(value) !== '[object Float32Array]') {\n    throw new ColorFormatError(msgArr);\n  }\n};\n\nmodule.exports = Color;","map":{"version":3,"sources":["/Users/roaa/Desktop/demo/node_modules/@brunoimbrizi/controlkit/lib/component/Color.js"],"names":["ObjectComponent","require","Node","ColorMode","Picker","ColorUtil","Options","ButtonPreset","Metric","CSS","Event_","NodeEvent","ComponentEvent","ColorFormatError","DEFAULT_COLOR_MODE","HEX","DEFAULT_PRESETS","MSG_COLOR_FORMAT_HEX","MSG_COLOR_FORMAT_RGB_RGBFV_HSV","MSG_COLOR_PRESET_FORMAT_HEX","MSG_COLOR_PRESET_FORMAT_RGB_RGBFV_HSV","Color","parent","object","value","params","apply","arguments","presets","colorMode","onChange","_onChange","_presetsKey","color","_color","_value","_obj","_key","_colorMode","_validateColorFormat","wrap","_wrapNode","setStyleClass","addChild","wrap_","WrapColorWPreset","i","length","options","get","presetBtn","onPresetDeactivate","clear","deactivate","self","onPresetActivate","build","pushHistoryState","getSelectedIndex","applyValue","PADDING_PRESET","setOnActive","setOnDeactive","addEventListener","MOUSE_DOWN","_onColorTrigger","bind","_updateColor","prototype","Object","create","constructor","colorModeHEX","colorModeRGB","RGB","colorModeRGBfv","RGBfv","colorModeHSV","HSV","temp","onPickerPick","getHEX","getRGB","getRGBfv","getHSV","picker","setColorHEX","setColorRGB","setColorRGBfv","setColorHSV","setCallbackPick","open","dispatchEvent","VALUE_UPDATED","onValueUpdate","e","data","origin","colorNode","nodeColor","setProperty","RGB2HEX","RGBfv2HEX","HSV2RGB","getStyle","backgroundColor","msgHex","msgArr","toString","call","module","exports"],"mappings":"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","sourcesContent":["var ObjectComponent = require('./../core/ObjectComponent');\r\n\r\nvar Node      = require('../core/document/Node');\r\nvar ColorMode = require('../core/color/ColorMode');\r\nvar Picker    = require('./Picker');\r\nvar ColorUtil = require('../core/color/ColorUtil');\r\nvar Options   = require('./Options');\r\nvar ButtonPreset = require('./ButtonPreset');\r\nvar Metric = require('./Metric'),\r\n    CSS    = require('../core/document/CSS');\r\n\r\nvar Event_         = require('../core/event/Event'),\r\n    NodeEvent      = require('../core/document/NodeEvent'),\r\n    ComponentEvent = require('../core/ComponentEvent');\r\n\r\nvar ColorFormatError = require('../core/color/ColorFormatError');\r\n\r\nvar DEFAULT_COLOR_MODE = ColorMode.HEX,\r\n    DEFAULT_PRESETS = null;\r\n\r\nvar MSG_COLOR_FORMAT_HEX = 'Color format should be hex. Set colorMode to rgb, rgbfv or hsv.',\r\n    MSG_COLOR_FORMAT_RGB_RGBFV_HSV = 'Color format should be rgb, rgbfv or hsv. Set colorMode to hex.',\r\n    MSG_COLOR_PRESET_FORMAT_HEX = 'Preset color format should be hex.',\r\n    MSG_COLOR_PRESET_FORMAT_RGB_RGBFV_HSV = 'Preset color format should be rgb, rgbfv or hsv.';\r\n\r\nfunction Color(parent, object, value, params){\r\n    ObjectComponent.apply(this, arguments);\r\n\r\n    params = params || {};\r\n    params.presets = params.presets || DEFAULT_PRESETS;\r\n    params.colorMode = params.colorMode || DEFAULT_COLOR_MODE;\r\n    params.onChange = params.onChange || this._onChange;\r\n\r\n\r\n    this._presetsKey = params.presets;\r\n    this._onChange = params.onChange;\r\n\r\n    var color = this._color = new Node();\r\n    value = this._value = this._obj[this._key];\r\n\r\n    var colorMode = this._colorMode = params.colorMode;\r\n\r\n    this._validateColorFormat(value, MSG_COLOR_FORMAT_HEX, MSG_COLOR_FORMAT_RGB_RGBFV_HSV);\r\n\r\n    var wrap = this._wrapNode;\r\n\r\n    if(!this._presetsKey){\r\n        color.setStyleClass(CSS.Color);\r\n        wrap.addChild(color);\r\n    }\r\n    else{\r\n        color.setStyleClass(CSS.Color);\r\n\r\n        var wrap_ = new Node();\r\n        wrap_.setStyleClass(CSS.WrapColorWPreset);\r\n\r\n        wrap.addChild(wrap_);\r\n        wrap_.addChild(color);\r\n\r\n        var presets = this._obj[this._presetsKey];\r\n\r\n        var i = -1;\r\n        while(++i < presets.length){\r\n            this._validateColorFormat(presets[i], MSG_COLOR_PRESET_FORMAT_HEX,\r\n                MSG_COLOR_PRESET_FORMAT_RGB_RGBFV_HSV);\r\n        }\r\n\r\n        var options = Options.get(),\r\n            presetBtn = new ButtonPreset(wrap);\r\n\r\n        var onPresetDeactivate = function(){\r\n            options.clear();\r\n            presetBtn.deactivate();\r\n        };\r\n\r\n        var self = this;\r\n        var onPresetActivate = function(){\r\n            options.build(presets,\r\n                self._value,\r\n                color,\r\n                function(){\r\n                    self.pushHistoryState();\r\n                    self._value = presets[options.getSelectedIndex()];\r\n                    self.applyValue();\r\n                    self._onChange(self._obj[self._key]);\r\n                },\r\n                onPresetDeactivate,\r\n                Metric.PADDING_PRESET,\r\n                true,\r\n                colorMode);\r\n        };\r\n        presetBtn.setOnActive(onPresetActivate);\r\n        presetBtn.setOnDeactive(onPresetDeactivate);\r\n    }\r\n\r\n    color.addEventListener(NodeEvent.MOUSE_DOWN, this._onColorTrigger.bind(this));\r\n    this._updateColor();\r\n}\r\nColor.prototype = Object.create(ObjectComponent.prototype);\r\nColor.prototype.constructor = Color;\r\n\r\nColor.prototype._onColorTrigger = function(){\r\n    var colorMode = this._colorMode,\r\n        colorModeHEX = ColorMode.HEX,\r\n        colorModeRGB = ColorMode.RGB,\r\n        colorModeRGBfv = ColorMode.RGBfv,\r\n        colorModeHSV = ColorMode.HSV;\r\n\r\n    var value = this._value,\r\n        temp;\r\n\r\n    var onPickerPick = function(){\r\n        this.pushHistoryState();\r\n\r\n        switch(colorMode){\r\n            case colorModeHEX:\r\n                this._value = Picker.get().getHEX();\r\n                break;\r\n            case colorModeRGB:\r\n                //if val = Float32array or so\r\n                temp = Picker.get().getRGB();\r\n                value[0] = temp[0];\r\n                value[1] = temp[1];\r\n                value[2] = temp[2];\r\n                break;\r\n\r\n            case colorModeRGBfv:\r\n                temp = Picker.get().getRGBfv();\r\n                value[0] = temp[0];\r\n                value[1] = temp[1];\r\n                value[2] = temp[2];\r\n                break;\r\n\r\n            case colorModeHSV:\r\n                this._value = Picker.get().getHSV();\r\n                break;\r\n        }\r\n\r\n        this.applyValue();\r\n\r\n    }.bind(this);\r\n\r\n    var picker = Picker.get();\r\n\r\n    switch(colorMode){\r\n        case colorModeHEX:\r\n            picker.setColorHEX(value);\r\n            break;\r\n        case colorModeRGB:\r\n            picker.setColorRGB(value[0], value[1], value[2]);\r\n            break;\r\n        case colorModeRGBfv:\r\n            picker.setColorRGBfv(value[0], value[1], value[2]);\r\n            break;\r\n        case colorModeHSV:\r\n            picker.setColorHSV(value[0], value[1], value[2]);\r\n            break;\r\n    }\r\n\r\n    picker.setCallbackPick(onPickerPick);\r\n    picker.open();\r\n};\r\n\r\nColor.prototype.applyValue = function(){\r\n    this._obj[this._key] = this._value;\r\n    this._updateColor();\r\n    this.dispatchEvent(new Event_(this, ComponentEvent.VALUE_UPDATED, null));\r\n    this._onChange(this._obj[this._key]);\r\n};\r\n\r\nColor.prototype.onValueUpdate = function(e){\r\n    if(e.data.origin == this)return;\r\n    this._value = this._obj[this._key];\r\n    this._updateColor();\r\n};\r\n\r\nColor.prototype._updateColor = function(){\r\n    var color = this._value,\r\n        colorNode = this._color,\r\n        nodeColor;\r\n\r\n    colorNode.setProperty('innerHTML', color);\r\n\r\n    switch(this._colorMode){\r\n        case ColorMode.HEX:\r\n            nodeColor = color;\r\n            break;\r\n\r\n        case ColorMode.RGB:\r\n            nodeColor = ColorUtil.RGB2HEX(color[0], color[1], color[2]);\r\n            break;\r\n\r\n        case ColorMode.RGBfv:\r\n            nodeColor = ColorUtil.RGBfv2HEX(color[0], color[1], color[2]);\r\n            break;\r\n\r\n        case ColorMode.HSV:\r\n            nodeColor = ColorUtil.HSV2RGB(color[0], color[1], color[2]);\r\n            break;\r\n    }\r\n\r\n    colorNode.getStyle().backgroundColor = nodeColor;\r\n};\r\n\r\nColor.prototype._validateColorFormat = function(value, msgHex, msgArr){\r\n    var colorMode = this._colorMode;\r\n\r\n    if(colorMode == ColorMode.HEX && Object.prototype.toString.call(value) === '[object Array]' ||\r\n        colorMode == ColorMode.HEX && Object.prototype.toString.call(value) === '[object Float32Array]'){\r\n        throw new ColorFormatError(msgHex);\r\n    }\r\n    if((colorMode == ColorMode.RGB ||\r\n        colorMode == ColorMode.RGBfv ||\r\n        colorMode == ColorMode.HSV) &&\r\n        Object.prototype.toString.call(value) !== '[object Array]' ||\r\n        colorMode == ColorMode.HSV &&\r\n        Object.prototype.toString.call(value) !== '[object Float32Array]'){\r\n        throw new ColorFormatError(msgArr);\r\n    }\r\n};\r\n\r\nmodule.exports = Color;\r\n"]},"metadata":{},"sourceType":"script"}