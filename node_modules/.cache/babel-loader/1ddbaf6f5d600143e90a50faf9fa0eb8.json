{"ast":null,"code":"import * as THREE from 'three';\nimport { easeOutQuad, easeInOutQuad, easeOutSine, easeInOutSine } from '../../utils/easing.utils';\nimport TouchTexture from './TouchTexture';\nimport { TweenLite } from 'gsap/TweenMax';\n\nconst glslify = require('glslify');\n\nexport default class Particles {\n  constructor(webgl) {\n    this.webgl = webgl;\n    this.container = new THREE.Object3D();\n  }\n\n  init(src) {\n    const loader = new THREE.TextureLoader();\n    console.log('loader: ', loader);\n    loader.load(src, texture => {\n      console.log('inn load');\n      this.texture = texture;\n      this.texture.minFilter = THREE.LinearFilter;\n      this.texture.magFilter = THREE.LinearFilter;\n      this.texture.format = THREE.RGBFormat;\n      this.width = texture.image.width;\n      this.height = texture.image.height;\n      this.initPoints(true);\n      this.initHitArea();\n      this.initTouch();\n      this.resize();\n      this.show();\n    });\n  }\n\n  initPoints(discard) {\n    console.log('initPoints');\n    this.numPoints = this.width * this.height;\n    let numVisible = this.numPoints;\n    let threshold = 0;\n    let originalColors;\n\n    if (discard) {\n      // discard pixels darker than threshold #22\n      numVisible = 0;\n      threshold = 34;\n      const img = this.texture.image;\n      console.log('image: ', img);\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      canvas.width = this.width;\n      canvas.height = this.height;\n      ctx.scale(1, -1);\n      ctx.drawImage(img, 0, 0, this.width, this.height * -1);\n      const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      originalColors = Float32Array.from(imgData.data);\n\n      for (let i = 0; i < this.numPoints; i++) {\n        if (originalColors[i * 4 + 0] > threshold) numVisible++;\n      } // console.log('numVisible', numVisible, this.numPoints);\n\n    }\n\n    const uniforms = {\n      uTime: {\n        value: 0\n      },\n      uRandom: {\n        value: 1.0\n      },\n      uDepth: {\n        value: 2.0\n      },\n      uSize: {\n        value: 0.0\n      },\n      uTextureSize: {\n        value: new THREE.Vector2(this.width, this.height)\n      },\n      uTexture: {\n        value: this.texture\n      },\n      uTouch: {\n        value: null\n      }\n    };\n    const material = new THREE.RawShaderMaterial({\n      uniforms,\n      vertexShader: glslify(require('../../../shaders/particle.vert')),\n      fragmentShader: glslify(require('../../../shaders/particle.frag')),\n      depthTest: false,\n      transparent: true // blending: THREE.AdditiveBlending\n\n    });\n    const geometry = new THREE.InstancedBufferGeometry(); // positions\n\n    const positions = new THREE.BufferAttribute(new Float32Array(4 * 3), 3);\n    positions.setXYZ(0, -0.5, 0.5, 0.0);\n    positions.setXYZ(1, 0.5, 0.5, 0.0);\n    positions.setXYZ(2, -0.5, -0.5, 0.0);\n    positions.setXYZ(3, 0.5, -0.5, 0.0);\n    geometry.addAttribute('position', positions); // uvs\n\n    const uvs = new THREE.BufferAttribute(new Float32Array(4 * 2), 2);\n    uvs.setXYZ(0, 0.0, 0.0);\n    uvs.setXYZ(1, 1.0, 0.0);\n    uvs.setXYZ(2, 0.0, 1.0);\n    uvs.setXYZ(3, 1.0, 1.0);\n    geometry.addAttribute('uv', uvs); // index\n\n    geometry.setIndex(new THREE.BufferAttribute(new Uint16Array([0, 2, 1, 2, 3, 1]), 1));\n    const indices = new Uint16Array(numVisible);\n    const offsets = new Float32Array(numVisible * 3);\n    const angles = new Float32Array(numVisible);\n\n    for (let i = 0, j = 0; i < this.numPoints; i++) {\n      if (discard && originalColors[i * 4 + 0] <= threshold) continue;\n      offsets[j * 3 + 0] = i % this.width;\n      offsets[j * 3 + 1] = Math.floor(i / this.width);\n      indices[j] = i;\n      angles[j] = Math.random() * Math.PI;\n      j++;\n    }\n\n    geometry.addAttribute('pindex', new THREE.InstancedBufferAttribute(indices, 1, false));\n    geometry.addAttribute('offset', new THREE.InstancedBufferAttribute(offsets, 3, false));\n    geometry.addAttribute('angle', new THREE.InstancedBufferAttribute(angles, 1, false));\n    this.object3D = new THREE.Mesh(geometry, material);\n    this.container.add(this.object3D);\n  }\n\n  initTouch() {\n    // create only once\n    if (!this.touch) this.touch = new TouchTexture(this);\n    this.object3D.material.uniforms.uTouch.value = this.touch.texture;\n  }\n\n  initHitArea() {\n    const geometry = new THREE.PlaneGeometry(this.width, this.height, 1, 1);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xFFFFFF,\n      wireframe: true,\n      depthTest: false\n    });\n    material.visible = false;\n    this.hitArea = new THREE.Mesh(geometry, material);\n    this.container.add(this.hitArea);\n  }\n\n  addListeners() {\n    this.handlerInteractiveMove = this.onInteractiveMove.bind(this);\n    this.webgl.interactive.addListener('interactive-move', this.handlerInteractiveMove);\n    this.webgl.interactive.objects.push(this.hitArea);\n    this.webgl.interactive.enable();\n  }\n\n  removeListeners() {\n    this.webgl.interactive.removeListener('interactive-move', this.handlerInteractiveMove);\n    const index = this.webgl.interactive.objects.findIndex(obj => obj === this.hitArea);\n    this.webgl.interactive.objects.splice(index, 1);\n    this.webgl.interactive.disable();\n  } // ---------------------------------------------------------------------------------------------\n  // PUBLIC\n  // ---------------------------------------------------------------------------------------------\n\n\n  update(delta) {\n    if (!this.object3D) return;\n    if (this.touch) this.touch.update();\n    this.object3D.material.uniforms.uTime.value += delta;\n  }\n\n  show() {\n    let time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.0;\n    // reset\n    TweenLite.fromTo(this.object3D.material.uniforms.uSize, time, {\n      value: 0.5\n    }, {\n      value: 1.5\n    });\n    TweenLite.to(this.object3D.material.uniforms.uRandom, time, {\n      value: 2.0\n    });\n    TweenLite.fromTo(this.object3D.material.uniforms.uDepth, time * 1.5, {\n      value: 40.0\n    }, {\n      value: 4.0\n    });\n    this.addListeners();\n  }\n\n  hide(_destroy) {\n    let time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.8;\n    return new Promise((resolve, reject) => {\n      console.log('this.object3D: ', this.object3D);\n      TweenLite.to(this.object3D.material.uniforms.uRandom, time, {\n        value: 5.0,\n        onComplete: () => {\n          if (_destroy) this.destroy();\n          resolve();\n        }\n      }); //TweenLite.to(this.object3D.material.uniforms.uDepth, time, { value: -20.0, ease: Quad.easeIn });\n\n      TweenLite.to(this.object3D.material.uniforms.uSize, time * 0.8, {\n        value: 0.0\n      });\n      this.removeListeners();\n    });\n  }\n\n  destroy() {\n    if (!this.object3D) return;\n    this.object3D.parent.remove(this.object3D);\n    this.object3D.geometry.dispose();\n    this.object3D.material.dispose();\n    this.object3D = null;\n    if (!this.hitArea) return;\n    this.hitArea.parent.remove(this.hitArea);\n    this.hitArea.geometry.dispose();\n    this.hitArea.material.dispose();\n    this.hitArea = null;\n  } // ---------------------------------------------------------------------------------------------\n  // EVENT HANDLERS\n  // ---------------------------------------------------------------------------------------------\n\n\n  resize() {\n    if (!this.object3D) return;\n    const scale = this.webgl.fovHeight / this.height;\n    this.object3D.scale.set(scale, scale, 1);\n    this.hitArea.scale.set(scale, scale, 1);\n  }\n\n  onInteractiveMove(e) {\n    const uv = e.intersectionData.uv;\n    if (this.touch) this.touch.addTouch(uv);\n  }\n\n}","map":{"version":3,"sources":["/Users/roaa/Desktop/demo/src/scripts/webgl/particles/Particles.js"],"names":["THREE","easeOutQuad","easeInOutQuad","easeOutSine","easeInOutSine","TouchTexture","TweenLite","glslify","require","Particles","constructor","webgl","container","Object3D","init","src","loader","TextureLoader","console","log","load","texture","minFilter","LinearFilter","magFilter","format","RGBFormat","width","image","height","initPoints","initHitArea","initTouch","resize","show","discard","numPoints","numVisible","threshold","originalColors","img","canvas","document","createElement","ctx","getContext","scale","drawImage","imgData","getImageData","Float32Array","from","data","i","uniforms","uTime","value","uRandom","uDepth","uSize","uTextureSize","Vector2","uTexture","uTouch","material","RawShaderMaterial","vertexShader","fragmentShader","depthTest","transparent","geometry","InstancedBufferGeometry","positions","BufferAttribute","setXYZ","addAttribute","uvs","setIndex","Uint16Array","indices","offsets","angles","j","Math","floor","random","PI","InstancedBufferAttribute","object3D","Mesh","add","touch","PlaneGeometry","MeshBasicMaterial","color","wireframe","visible","hitArea","addListeners","handlerInteractiveMove","onInteractiveMove","bind","interactive","addListener","objects","push","enable","removeListeners","removeListener","index","findIndex","obj","splice","disable","update","delta","time","fromTo","to","hide","_destroy","Promise","resolve","reject","onComplete","destroy","parent","remove","dispose","fovHeight","set","e","uv","intersectionData","addTouch"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport { easeOutQuad, easeInOutQuad, easeOutSine, easeInOutSine } from '../../utils/easing.utils';\nimport TouchTexture from './TouchTexture';\nimport { TweenLite } from 'gsap/TweenMax';\nconst glslify = require('glslify');\n\n\n\n\nexport default class Particles {\n\t\n\tconstructor(webgl) {\n\t\tthis.webgl = webgl;\n\t\tthis.container = new THREE.Object3D();\n\t}\n\n\tinit(src) {\n\t\tconst loader = new THREE.TextureLoader();\n\t\tconsole.log('loader: ', loader)\n\t\tloader.load(src, (texture) => {\n\t\t\tconsole.log('inn load')\n\t\t\tthis.texture = texture;\n\t\t\tthis.texture.minFilter = THREE.LinearFilter;\n\t\t\tthis.texture.magFilter = THREE.LinearFilter;\n\t\t\tthis.texture.format = THREE.RGBFormat;\n\n\t\t\tthis.width = texture.image.width;\n\t\t\tthis.height = texture.image.height;\n\n\t\t\tthis.initPoints(true);\n\t\t\tthis.initHitArea();\n\t\t\tthis.initTouch();\n\t\t\tthis.resize();\n\t\t\tthis.show();\n\t\t});\n\t}\n\n\tinitPoints(discard) {\n\t\tconsole.log('initPoints')\n\t\tthis.numPoints = this.width * this.height;\n\n\t\tlet numVisible = this.numPoints;\n\t\tlet threshold = 0;\n\t\tlet originalColors;\n\n\t\tif (discard) {\n\t\t\t// discard pixels darker than threshold #22\n\t\t\tnumVisible = 0;\n\t\t\tthreshold = 34;\n\n\t\t\tconst img = this.texture.image;\n\t\t\tconsole.log('image: ', img)\n\t\t\tconst canvas = document.createElement('canvas');\n\t\t\tconst ctx = canvas.getContext('2d');\n\n\t\t\tcanvas.width = this.width;\n\t\t\tcanvas.height = this.height;\n\t\t\tctx.scale(1, -1);\n\t\t\tctx.drawImage(img, 0, 0, this.width, this.height * -1);\n\n\t\t\tconst imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\t\t\toriginalColors = Float32Array.from(imgData.data);\n\n\t\t\tfor (let i = 0; i < this.numPoints; i++) {\n\t\t\t\tif (originalColors[i * 4 + 0] > threshold) numVisible++;\n\t\t\t}\n\n\t\t\t// console.log('numVisible', numVisible, this.numPoints);\n\t\t}\n\n\t\tconst uniforms = {\n\t\t\tuTime: { value: 0 },\n\t\t\tuRandom: { value: 1.0 },\n\t\t\tuDepth: { value: 2.0 },\n\t\t\tuSize: { value: 0.0 },\n\t\t\tuTextureSize: { value: new THREE.Vector2(this.width, this.height) },\n\t\t\tuTexture: { value: this.texture },\n\t\t\tuTouch: { value: null },\n\t\t};\n\n\t\tconst material = new THREE.RawShaderMaterial({\n\t\t\tuniforms,\n\t\t\tvertexShader: glslify(require('../../../shaders/particle.vert')),\n\t\t\tfragmentShader: glslify(require('../../../shaders/particle.frag')),\n\t\t\tdepthTest: false,\n\t\t\ttransparent: true,\n\t\t\t// blending: THREE.AdditiveBlending\n\t\t});\n\n\t\tconst geometry = new THREE.InstancedBufferGeometry();\n\n\t\t// positions\n\t\tconst positions = new THREE.BufferAttribute(new Float32Array(4 * 3), 3);\n\t\tpositions.setXYZ(0, -0.5,  0.5,  0.0);\n\t\tpositions.setXYZ(1,  0.5,  0.5,  0.0);\n\t\tpositions.setXYZ(2, -0.5, -0.5,  0.0);\n\t\tpositions.setXYZ(3,  0.5, -0.5,  0.0);\n\t\tgeometry.addAttribute('position', positions);\n\n\t\t// uvs\n\t\tconst uvs = new THREE.BufferAttribute(new Float32Array(4 * 2), 2);\n\t\tuvs.setXYZ(0,  0.0,  0.0);\n\t\tuvs.setXYZ(1,  1.0,  0.0);\n\t\tuvs.setXYZ(2,  0.0,  1.0);\n\t\tuvs.setXYZ(3,  1.0,  1.0);\n\t\tgeometry.addAttribute('uv', uvs);\n\n\t\t// index\n\t\tgeometry.setIndex(new THREE.BufferAttribute(new Uint16Array([ 0, 2, 1, 2, 3, 1 ]), 1));\n\n\t\tconst indices = new Uint16Array(numVisible);\n\t\tconst offsets = new Float32Array(numVisible * 3);\n\t\tconst angles = new Float32Array(numVisible);\n\n\t\tfor (let i = 0, j = 0; i < this.numPoints; i++) {\n\t\t\tif (discard && originalColors[i * 4 + 0] <= threshold) continue;\n\n\t\t\toffsets[j * 3 + 0] = i % this.width;\n\t\t\toffsets[j * 3 + 1] = Math.floor(i / this.width);\n\n\t\t\tindices[j] = i;\n\n\t\t\tangles[j] = Math.random() * Math.PI;\n\n\t\t\tj++;\n\t\t}\n\n\t\tgeometry.addAttribute('pindex', new THREE.InstancedBufferAttribute(indices, 1, false));\n\t\tgeometry.addAttribute('offset', new THREE.InstancedBufferAttribute(offsets, 3, false));\n\t\tgeometry.addAttribute('angle', new THREE.InstancedBufferAttribute(angles, 1, false));\n\n\t\tthis.object3D = new THREE.Mesh(geometry, material);\n\t\tthis.container.add(this.object3D);\n\t}\n\n\tinitTouch() {\n\t\t// create only once\n\t\tif (!this.touch) this.touch = new TouchTexture(this);\n\t\tthis.object3D.material.uniforms.uTouch.value = this.touch.texture;\n\t}\n\n\tinitHitArea() {\n\t\tconst geometry = new THREE.PlaneGeometry(this.width, this.height, 1, 1);\n\t\tconst material = new THREE.MeshBasicMaterial({ color: 0xFFFFFF, wireframe: true, depthTest: false });\n\t\tmaterial.visible = false;\n\t\tthis.hitArea = new THREE.Mesh(geometry, material);\n\t\tthis.container.add(this.hitArea);\n\t}\n\n\taddListeners() {\n\t\tthis.handlerInteractiveMove = this.onInteractiveMove.bind(this);\n\n\t\tthis.webgl.interactive.addListener('interactive-move', this.handlerInteractiveMove);\n\t\tthis.webgl.interactive.objects.push(this.hitArea);\n\t\tthis.webgl.interactive.enable();\n\t}\n\n\tremoveListeners() {\n\t\tthis.webgl.interactive.removeListener('interactive-move', this.handlerInteractiveMove);\n\t\t\n\t\tconst index = this.webgl.interactive.objects.findIndex(obj => obj === this.hitArea);\n\t\tthis.webgl.interactive.objects.splice(index, 1);\n\t\tthis.webgl.interactive.disable();\n\t}\n\n\t// ---------------------------------------------------------------------------------------------\n\t// PUBLIC\n\t// ---------------------------------------------------------------------------------------------\n\n\tupdate(delta) {\n\t\tif (!this.object3D) return;\n\t\tif (this.touch) this.touch.update();\n\n\t\tthis.object3D.material.uniforms.uTime.value += delta;\n\t}\n\n\tshow(time = 1.0) {\n\t\t// reset\n\t\tTweenLite.fromTo(this.object3D.material.uniforms.uSize, time, { value: 0.5 }, { value: 1.5 });\n\t\tTweenLite.to(this.object3D.material.uniforms.uRandom, time, { value: 2.0 });\n\t\tTweenLite.fromTo(this.object3D.material.uniforms.uDepth, time * 1.5, { value: 40.0 }, { value: 4.0 });\n\n\t\tthis.addListeners();\n\t}\n\n\thide(_destroy, time = 0.8) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconsole.log('this.object3D: ', this.object3D)\n\t\t\tTweenLite.to(this.object3D.material.uniforms.uRandom, time, { value: 5.0, onComplete: () => {\n\t\t\t\tif (_destroy) this.destroy();\n\t\t\t\tresolve();\n\t\t\t} });\n\t\t\t//TweenLite.to(this.object3D.material.uniforms.uDepth, time, { value: -20.0, ease: Quad.easeIn });\n\t\t\tTweenLite.to(this.object3D.material.uniforms.uSize, time * 0.8, { value: 0.0 });\n\n\t\t\tthis.removeListeners();\n\t\t});\n\t}\n\n\tdestroy() {\n\t\tif (!this.object3D) return;\n\n\t\tthis.object3D.parent.remove(this.object3D);\n\t\tthis.object3D.geometry.dispose();\n\t\tthis.object3D.material.dispose();\n\t\tthis.object3D = null;\n\n\t\tif (!this.hitArea) return;\n\n\t\tthis.hitArea.parent.remove(this.hitArea);\n\t\tthis.hitArea.geometry.dispose();\n\t\tthis.hitArea.material.dispose();\n\t\tthis.hitArea = null;\n\t}\n\n\t// ---------------------------------------------------------------------------------------------\n\t// EVENT HANDLERS\n\t// ---------------------------------------------------------------------------------------------\n\n\tresize() {\n\t\tif (!this.object3D) return;\n\n\t\tconst scale = this.webgl.fovHeight / this.height;\n\t\tthis.object3D.scale.set(scale, scale, 1);\n\t\tthis.hitArea.scale.set(scale, scale, 1);\n\t}\n\n\tonInteractiveMove(e) {\n\t\tconst uv = e.intersectionData.uv;\n\t\tif (this.touch) this.touch.addTouch(uv);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}